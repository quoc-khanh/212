1.	Tr? v? m?ng ð?ng. Vi?t m?t hàm concat(const char*, const* char) nh?n tham s? là hai h?ng xâu kí t?, tr? v? m?t xâu kí t? là k?t qu? c?a vi?c n?i hai xâu ðó. Ch?ng h?n n?u tham s? l?n lý?t có n?i dung là “Hello“ và “World” th? xâu tr? v? có n?i dung “HelloWorld”.
Th?o lu?n: C++ không cho phép hàm có giá tr? tr? v? là m?t m?ng ki?u thông thý?ng. Ð?i v?i các hàm x? l? ra k?t qu? là m?t m?ng, thay v? tr? v? m?ng, hàm ch? có th? tr? v? ð?a ch? c?a m?ng k?t qu?. V?n ð? là m?ng k?t qu? ðó ð?t ? ðâu? Ta có m?t vài l?a ch?n: 
a.	m?ng k?t qu? ðý?c khai báo s?n là bi?n toàn c?c, các hàm t? do truy c?p. 
b.	m?ng k?t qu? ðý?c nõi g?i hàm khai báo s?n và truy?n ð?a ch? vào hàm concat.
c.	M?ng k?t qu? ðý?c khai báo là bi?n ð?a phýõng c?a concat và concat s? tr? v? ð?a ch? c?a m?ng ðó cho nõi g?i hàm
d.	m?ng k?t qu? ðý?c c?p phát ð?ng t? bên trong concat(), và concat() s? tr? v? ð?a ch? c?a m?ng ðó cho nõi g?i hàm
Trong nhi?u trý?ng h?p, ð?c bi?t ? bài này, (a) không ph?i l?a ch?n t?t v? ta thý?ng không bi?t m?ng này c?n có kích thý?c bao nhiêu ð? khai báo s?n kích thý?c c? ð?nh cho hàm toàn c?c. Hõn n?a, d? li?u ð? ? khu v?c bi?n toàn c?c do ðý?c các hàm t? do truy c?p nên d? b? l?i. (b) c?ng không ph?i l?a ch?n t?t n?u v? nõi g?i hàm ph?i bi?t k?t qu? s? có kích thý?c bao nhiêu ph?n t? ð? mà chu?n b? trý?c cho ð?; concat ph?i ph? thu?c vào nõi g?i, nó s? b? l?i n?u nõi g?i hàm không chu?n b? ðúng kích thý?c c?n thi?t. (c) là l?a ch?n t?i v? m?ng k?t qu? ð?a phýõng s? b? g? kh?i b? nh? ngay khi concat k?t thúc, vi?c nõi g?i hàm truy nh?p ð? l?y k?t qu? s? là truy nh?p vào vùng b? nh? không h?p l? (dangling references). (d) là l?a ch?n h?p l? nh?t, concat ch? ð?ng xin c?p phát lý?ng b? nh? ð? dùng, nó không b? ph? thu?c vào nõi g?i hàm, và vùng b? nh? concat c?p phát v?n ti?p t?c h?p l? sau khi nó k?t thúc.
Do ðó, b?n c?n dùng l?a ch?n (d) cho bài này.
	G?i ? b? sung (bôi ðen ð? xem): 
?	trong hàm concat, b?n có th? dùng hàm trong thý vi?n <cstring>, ch?ng h?n strcpy() hay strncpy() ð? sao chép xâu, strcat hay strncat ð? n?i xâu. Xem chi ti?t và ví d? t?i http://www.cplusplus.com/reference/cstring/. 
?	? tý?ng thu?t toán: (1) tính ra kích thý?c c?a xâu k?t qu?, (2) c?p phát ð?ng m?ng k?t qu? v?i kích thý?c v?a tính, (3) chép xâu th? nh?t vào ð?u m?ng ð?ng, (4) chép/n?i xâu th? hai vào cu?i m?ng. (5) tr? v? ð?a ch? m?ng k?t qu?.

	H?y demo hàm concat trong hàm main(), ð?ng m?t công nh?p d? li?u t? bàn phím, h?y hardcode d? li?u th? nghi?m.

2.	L?i s? d?ng con tr?. H?y ch?y chýõng tr?nh th? nghi?m các ðo?n code sau. Chú thích vào code ðâu là các d?ng gây l?i và ðó là l?i g?.
 int* p = new int;
 int* p2 = p;
 *p = 10;
 delete p; // p2 ðang tr? ð?n ô nh? gi?ng p; khi delete p là c?ng delete ô nh? ðó và p2 tr? ð?n vùng nh? ko xác ð?nh, không ðý?c c?p phát
*p2 = 100;
 cout << *p2;
 delete p2;

3.	H?y ch?y chýõng tr?nh th? nghi?m ðo?n l?nh sau.Ch?y th? và cho bi?t l?nh in cerr nào không ch?y nhý mong mu?n. Ðó là v? l?i g?? (cerr là ð? báo l?i ra màn h?nh, nó týõng t? nhý cout nhýng khác v?i cout ? ch? cerr s? in ngay l?p t?c, c?n cout có th? tr? và có th? m?t ph?n cu?i n?u chýõng tr?nh crash trý?c khi nó k?p in )
char* a = new char[10];
char* c = a + 3;
for (int i = 0; i < 9; i++) a[i] = 'a'; 
a[9] = '\0';
cerr <<"a: " << "-" << a << "-" << endl;
cerr <<"c: " << "-" << c << "-" << endl;
delete c;// l?i không th? xóa ðý?c
cerr << "a after deleting c:" << "-" << a << "-" << endl;
// void Cap_Phat_Lai_Bo_Nho(int *&a, int n)
{
	int *Temp = new int[n]; // Kh?i t?o và c?p phát 1 m?ng ph? Temp ch?a các ph?n t? m?ng a
	for(int i = 0; i < n; i++)
	{
		Temp[i] = a[i];
	}
	a = new int[n -1]; // C?p phát l?i vùng nh? cho con tr? a <=> thu g?n ði 1 ô nh?
	for(int i = 0 ; i < 3; i++)
	{
		a[i] = Temp[i];
	}
for(int i = 3 ; i < n-1; i++)
	{
		a[i] = Temp[i+1];
	}

	delete[] Temp;
}
Tr? l?i b?ng cách chú thích vào code.
     G?i ? b? sung (bôi ðen ð? xem): 
Tài li?u ð?c t? chu?n C++ (M?c 5.3.5.2 Delete) vi?t r?ng:  
“...In the second alternative (delete array), the value of the operand of delete shall be the pointer value which resulted from a previous array new-expression.72) If not, the behavior is undefined. ....” 
   ngh?a là 
“...? l?a ch?n th? hai (delete array), giá tr? c?a toán h?ng c?a toán t? delete ph?i là giá tr? con tr? thu ðý?c t? m?t bi?u th?c new array trý?c ðó.72) N?u không, hành vi c?a chýõng tr?nh là không xác ð?nh. ....”
   Có ngh?a, b?n ð? g?p may n?u ðo?n chýõng tr?nh trên không gây l?i khi ch?y, nhýng ði?u ðó không ð?m b?o l?n ch?y sau ho?c ðo?n code týõng t? s? không gây l?i. 

4.	L?i gi?i phóng b? nh?. Các bi?n toàn c?c, bi?n ð?a phýõng là các bi?n ðý?c c?p phát và gi?i phóng t? ð?ng. Các bi?n do l?p tr?nh viên c?p phát ð?ng (toán t? new) m?i là lo?i bi?n ðý?c phép gi?i phóng. Tuy nhiên C++ l?i không ki?m soát m?t con tr? ðang tr? ði ðâu khi l?p tr?nh viên gi?i phóng vùng b? nh? mà nó tr? t?i. H?y vi?t m?t chýõng tr?nh th? nghi?m l?i s? d?ng b? nh? ð?ng theo ki?u t?o m?t con tr? tr? t?i vùng nh? c?a m?t bi?n ð?a phýõng sau ðó gi?i phóng con tr? ðó. Chuy?n g? x?y ra? H?y vi?t câu tr? l?i ? d?ng chú thích trong chýõng tr?nh.
